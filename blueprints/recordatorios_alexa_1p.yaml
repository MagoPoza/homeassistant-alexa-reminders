blueprint:
  name: Recordatorios alexa a calendario HA (1 Persona)
  description: Añade los recordatorios de Alexa al calendario de homeassistant correspondiente según la persona que lo creó, válido para 1 persona
  domain: automation
  input:
    alexa_sensors:
      name: Sensores de Recordatorios
      description: Selecciona todos los sensores de recordatorios de Alexa que quieras incluir
      selector:
        entity:
          domain: sensor
          multiple: true
    general_calendar:
      name: Calendario General
      description: Calendario donde se agregarán los recordatorios sin persona asignada
      selector:
        entity:
          domain: calendar
    person_1_name:
      name: Nombre Persona 1  (Obligatorio)
      description: Nombre de la primera persona
      default: ""
      selector:
        text:
    person_1_id:
      name: ID Persona 1 (Obligatorio)
      description: Amazon Person ID (ejemplo amzn1.account.123456789)
      default: ""
      selector:
        text:
    person_1_calendar:
      name: Calendario Persona 1 (Obligatorio)
      description: Calendario para la primera persona
      default: ""
      selector:
        entity:
          domain: calendar
          multiple: false

variables:
  alexa_sensors: !input alexa_sensors
  person_1_name: !input person_1_name
  person_1_id: !input person_1_id
  person_1_calendar: !input person_1_calendar
  general_calendar: !input general_calendar

trigger:
  - platform: state
    entity_id: !input alexa_sensors
conditions: []
actions:
  - data:
      message: >-
        {% set devices = alexa_sensors %}[{% set comma = namespace(needed=false) %}{% for device in devices %}{% set raw_reminders = state_attr(device, 'sorted_active') %}{% if raw_reminders %}{% set reminders = raw_reminders | string | from_json %}{% for reminder in reminders %}{% if comma.needed %},{% endif %}{
          "recordatorio": "{{ reminder[1]['reminderLabel'] | default('') }}",
          "fecha": "{{ reminder[1]['originalDate'] | default('') }}",
          "hora": "{{ reminder[1]['originalTime'].split('.')[0] if reminder[1]['originalTime'] is defined else '' }}",
          "persona": "{% if reminder[1]['personProfile']['personId'] == person_1_id %}{{ person_1_name }}{% else %}{{ reminder[1]['personProfile']['personId'] | default('') }}{% endif %}",
          "dispositivo": "{{ device.split('_next')[0] | replace('sensor.', '') }}"
        }{% set comma.needed = true %}{% endfor %}{% endif %}{% endfor %}]
    action: shell_command.alexa_reminders_new
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - response_variable: eventos_nuevos
    action: shell_command.compare_reminders
    data: {}
  - if:
      - condition: template
        value_template: >-
          {{ eventos_nuevos.stdout is not none and eventos_nuevos.stdout |
          from_json | length > 0 }}
    then:
      - repeat:
          for_each: "{{ eventos_nuevos.stdout | from_json }}"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ repeat.item.persona == person_1_name }}"
                  sequence:
                    - target:
                        entity_id: !input person_1_calendar
                      data:
                        summary: "{{ repeat.item.summary }}"
                        start_date_time: "{{ repeat.item.start_date_time }}"
                        end_date_time: "{{ repeat.item.end_date_time }}"
                      action: calendar.create_event
              default:
                - target:
                    entity_id: !input general_calendar
                  data:
                    summary: "{{ repeat.item.summary }}"
                    start_date_time: "{{ repeat.item.start_date_time }}"
                    end_date_time: "{{ repeat.item.end_date_time }}"
                  action: calendar.create_event
  - action: shell_command.alexa_reminders_old
    data: {}
mode: single